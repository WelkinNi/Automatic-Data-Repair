/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package qa.qcri.nadeef.service.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class TNadeefService {

  public interface Iface {

    /**
     * Generates UDF code for the rule.
     * @param rule Rule.
     * @param tableName target table name.
     * @return generated code.
     * 
     * @param rule
     * @param tableName
     * @param dbname
     */
    public String generate(TRule rule, String tableName, String dbname) throws TNadeefRemoteException, org.apache.thrift.TException;

    /**
     * Verify the given rule.
     * @param rule input rule.
     * 
     * @param rule
     */
    public boolean verify(TRule rule) throws TNadeefRemoteException, org.apache.thrift.TException;

    /**
     * Detect with the given rule.
     * @param rule input rule.
     * @param table1 table 1 name.
     * @param table2 table 2 name.
     * @param outputdb output database name.
     * @return job key.
     * 
     * @param rule
     * @param table1
     * @param table2
     * @param outputdb
     */
    public String detect(TRule rule, String table1, String table2, String outputdb) throws TNadeefRemoteException, org.apache.thrift.TException;

    /**
     * Repair with the given rule.
     * @param rule input rule.
     * @param table1 table 1 name.
     * @param table2 table 2 name.
     * @param outputdb output database name.
     * @return job key.
     * 
     * @param rule
     * @param table1
     * @param table2
     * @param outputdb
     */
    public String repair(TRule rule, String table1, String table2, String outputdb) throws TNadeefRemoteException, org.apache.thrift.TException;

    /**
     * Gets status of a specific job.
     * @param rule input rule.
     * @return job status.
     * 
     * @param key
     */
    public TJobStatus getJobStatus(String key) throws org.apache.thrift.TException;

    /**
     * Gets all job status.
     * @return all the job status.
     */
    public List<TJobStatus> getAllJobStatus() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void generate(TRule rule, String tableName, String dbname, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generate_call> resultHandler) throws org.apache.thrift.TException;

    public void verify(TRule rule, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.verify_call> resultHandler) throws org.apache.thrift.TException;

    public void detect(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.detect_call> resultHandler) throws org.apache.thrift.TException;

    public void repair(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.repair_call> resultHandler) throws org.apache.thrift.TException;

    public void getJobStatus(String key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getAllJobStatus(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllJobStatus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String generate(TRule rule, String tableName, String dbname) throws TNadeefRemoteException, org.apache.thrift.TException
    {
      send_generate(rule, tableName, dbname);
      return recv_generate();
    }

    public void send_generate(TRule rule, String tableName, String dbname) throws org.apache.thrift.TException
    {
      generate_args args = new generate_args();
      args.setRule(rule);
      args.setTableName(tableName);
      args.setDbname(dbname);
      sendBase("generate", args);
    }

    public String recv_generate() throws TNadeefRemoteException, org.apache.thrift.TException
    {
      generate_result result = new generate_result();
      receiveBase(result, "generate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generate failed: unknown result");
    }

    public boolean verify(TRule rule) throws TNadeefRemoteException, org.apache.thrift.TException
    {
      send_verify(rule);
      return recv_verify();
    }

    public void send_verify(TRule rule) throws org.apache.thrift.TException
    {
      verify_args args = new verify_args();
      args.setRule(rule);
      sendBase("verify", args);
    }

    public boolean recv_verify() throws TNadeefRemoteException, org.apache.thrift.TException
    {
      verify_result result = new verify_result();
      receiveBase(result, "verify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verify failed: unknown result");
    }

    public String detect(TRule rule, String table1, String table2, String outputdb) throws TNadeefRemoteException, org.apache.thrift.TException
    {
      send_detect(rule, table1, table2, outputdb);
      return recv_detect();
    }

    public void send_detect(TRule rule, String table1, String table2, String outputdb) throws org.apache.thrift.TException
    {
      detect_args args = new detect_args();
      args.setRule(rule);
      args.setTable1(table1);
      args.setTable2(table2);
      args.setOutputdb(outputdb);
      sendBase("detect", args);
    }

    public String recv_detect() throws TNadeefRemoteException, org.apache.thrift.TException
    {
      detect_result result = new detect_result();
      receiveBase(result, "detect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "detect failed: unknown result");
    }

    public String repair(TRule rule, String table1, String table2, String outputdb) throws TNadeefRemoteException, org.apache.thrift.TException
    {
      send_repair(rule, table1, table2, outputdb);
      return recv_repair();
    }

    public void send_repair(TRule rule, String table1, String table2, String outputdb) throws org.apache.thrift.TException
    {
      repair_args args = new repair_args();
      args.setRule(rule);
      args.setTable1(table1);
      args.setTable2(table2);
      args.setOutputdb(outputdb);
      sendBase("repair", args);
    }

    public String recv_repair() throws TNadeefRemoteException, org.apache.thrift.TException
    {
      repair_result result = new repair_result();
      receiveBase(result, "repair");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "repair failed: unknown result");
    }

    public TJobStatus getJobStatus(String key) throws org.apache.thrift.TException
    {
      send_getJobStatus(key);
      return recv_getJobStatus();
    }

    public void send_getJobStatus(String key) throws org.apache.thrift.TException
    {
      getJobStatus_args args = new getJobStatus_args();
      args.setKey(key);
      sendBase("getJobStatus", args);
    }

    public TJobStatus recv_getJobStatus() throws org.apache.thrift.TException
    {
      getJobStatus_result result = new getJobStatus_result();
      receiveBase(result, "getJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatus failed: unknown result");
    }

    public List<TJobStatus> getAllJobStatus() throws org.apache.thrift.TException
    {
      send_getAllJobStatus();
      return recv_getAllJobStatus();
    }

    public void send_getAllJobStatus() throws org.apache.thrift.TException
    {
      getAllJobStatus_args args = new getAllJobStatus_args();
      sendBase("getAllJobStatus", args);
    }

    public List<TJobStatus> recv_getAllJobStatus() throws org.apache.thrift.TException
    {
      getAllJobStatus_result result = new getAllJobStatus_result();
      receiveBase(result, "getAllJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllJobStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void generate(TRule rule, String tableName, String dbname, org.apache.thrift.async.AsyncMethodCallback<generate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generate_call method_call = new generate_call(rule, tableName, dbname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRule rule;
      private String tableName;
      private String dbname;
      public generate_call(TRule rule, String tableName, String dbname, org.apache.thrift.async.AsyncMethodCallback<generate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rule = rule;
        this.tableName = tableName;
        this.dbname = dbname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generate_args args = new generate_args();
        args.setRule(rule);
        args.setTableName(tableName);
        args.setDbname(dbname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TNadeefRemoteException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generate();
      }
    }

    public void verify(TRule rule, org.apache.thrift.async.AsyncMethodCallback<verify_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verify_call method_call = new verify_call(rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRule rule;
      public verify_call(TRule rule, org.apache.thrift.async.AsyncMethodCallback<verify_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verify_args args = new verify_args();
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TNadeefRemoteException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verify();
      }
    }

    public void detect(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<detect_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      detect_call method_call = new detect_call(rule, table1, table2, outputdb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class detect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRule rule;
      private String table1;
      private String table2;
      private String outputdb;
      public detect_call(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<detect_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rule = rule;
        this.table1 = table1;
        this.table2 = table2;
        this.outputdb = outputdb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("detect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        detect_args args = new detect_args();
        args.setRule(rule);
        args.setTable1(table1);
        args.setTable2(table2);
        args.setOutputdb(outputdb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TNadeefRemoteException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_detect();
      }
    }

    public void repair(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<repair_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      repair_call method_call = new repair_call(rule, table1, table2, outputdb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class repair_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRule rule;
      private String table1;
      private String table2;
      private String outputdb;
      public repair_call(TRule rule, String table1, String table2, String outputdb, org.apache.thrift.async.AsyncMethodCallback<repair_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rule = rule;
        this.table1 = table1;
        this.table2 = table2;
        this.outputdb = outputdb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("repair", org.apache.thrift.protocol.TMessageType.CALL, 0));
        repair_args args = new repair_args();
        args.setRule(rule);
        args.setTable1(table1);
        args.setTable2(table2);
        args.setOutputdb(outputdb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TNadeefRemoteException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_repair();
      }
    }

    public void getJobStatus(String key, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJobStatus_call method_call = new getJobStatus_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public getJobStatus_call(String key, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobStatus_args args = new getJobStatus_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TJobStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobStatus();
      }
    }

    public void getAllJobStatus(org.apache.thrift.async.AsyncMethodCallback<getAllJobStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllJobStatus_call method_call = new getAllJobStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllJobStatus_call(org.apache.thrift.async.AsyncMethodCallback<getAllJobStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllJobStatus_args args = new getAllJobStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TJobStatus> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllJobStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("generate", new generate());
      processMap.put("verify", new verify());
      processMap.put("detect", new detect());
      processMap.put("repair", new repair());
      processMap.put("getJobStatus", new getJobStatus());
      processMap.put("getAllJobStatus", new getAllJobStatus());
      return processMap;
    }

    public static class generate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generate_args> {
      public generate() {
        super("generate");
      }

      public generate_args getEmptyArgsInstance() {
        return new generate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generate_result getResult(I iface, generate_args args) throws org.apache.thrift.TException {
        generate_result result = new generate_result();
        try {
          result.success = iface.generate(args.rule, args.tableName, args.dbname);
        } catch (TNadeefRemoteException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class verify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verify_args> {
      public verify() {
        super("verify");
      }

      public verify_args getEmptyArgsInstance() {
        return new verify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verify_result getResult(I iface, verify_args args) throws org.apache.thrift.TException {
        verify_result result = new verify_result();
        try {
          result.success = iface.verify(args.rule);
          result.setSuccessIsSet(true);
        } catch (TNadeefRemoteException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class detect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, detect_args> {
      public detect() {
        super("detect");
      }

      public detect_args getEmptyArgsInstance() {
        return new detect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public detect_result getResult(I iface, detect_args args) throws org.apache.thrift.TException {
        detect_result result = new detect_result();
        try {
          result.success = iface.detect(args.rule, args.table1, args.table2, args.outputdb);
        } catch (TNadeefRemoteException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class repair<I extends Iface> extends org.apache.thrift.ProcessFunction<I, repair_args> {
      public repair() {
        super("repair");
      }

      public repair_args getEmptyArgsInstance() {
        return new repair_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public repair_result getResult(I iface, repair_args args) throws org.apache.thrift.TException {
        repair_result result = new repair_result();
        try {
          result.success = iface.repair(args.rule, args.table1, args.table2, args.outputdb);
        } catch (TNadeefRemoteException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
      public getJobStatus() {
        super("getJobStatus");
      }

      public getJobStatus_args getEmptyArgsInstance() {
        return new getJobStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJobStatus_result getResult(I iface, getJobStatus_args args) throws org.apache.thrift.TException {
        getJobStatus_result result = new getJobStatus_result();
        result.success = iface.getJobStatus(args.key);
        return result;
      }
    }

    public static class getAllJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllJobStatus_args> {
      public getAllJobStatus() {
        super("getAllJobStatus");
      }

      public getAllJobStatus_args getEmptyArgsInstance() {
        return new getAllJobStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllJobStatus_result getResult(I iface, getAllJobStatus_args args) throws org.apache.thrift.TException {
        getAllJobStatus_result result = new getAllJobStatus_result();
        result.success = iface.getAllJobStatus();
        return result;
      }
    }

  }

  public static class generate_args implements org.apache.thrift.TBase<generate_args, generate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generate_args");

    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generate_argsTupleSchemeFactory());
    }

    private TRule rule; // required
    private String tableName; // required
    private String dbname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE((short)1, "rule"),
      TABLE_NAME((short)2, "tableName"),
      DBNAME((short)3, "dbname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE
            return RULE;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // DBNAME
            return DBNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRule.class)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generate_args.class, metaDataMap);
    }

    public generate_args() {
    }

    public generate_args(
      TRule rule,
      String tableName,
      String dbname)
    {
      this();
      this.rule = rule;
      this.tableName = tableName;
      this.dbname = dbname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generate_args(generate_args other) {
      if (other.isSetRule()) {
        this.rule = new TRule(other.rule);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
    }

    public generate_args deepCopy() {
      return new generate_args(this);
    }

    @Override
    public void clear() {
      this.rule = null;
      this.tableName = null;
      this.dbname = null;
    }

    public TRule getRule() {
      return this.rule;
    }

    public generate_args setRule(TRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public generate_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getDbname() {
      return this.dbname;
    }

    public generate_args setDbname(String dbname) {
      this.dbname = dbname;
      return this;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((TRule)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE:
        return getRule();

      case TABLE_NAME:
        return getTableName();

      case DBNAME:
        return getDbname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE:
        return isSetRule();
      case TABLE_NAME:
        return isSetTableName();
      case DBNAME:
        return isSetDbname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generate_args)
        return this.equals((generate_args)that);
      return false;
    }

    public boolean equals(generate_args that) {
      if (that == null)
        return false;

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generate_args typedOther = (generate_args)other;

      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generate_args(");
      boolean first = true;

      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generate_argsStandardSchemeFactory implements SchemeFactory {
      public generate_argsStandardScheme getScheme() {
        return new generate_argsStandardScheme();
      }
    }

    private static class generate_argsStandardScheme extends StandardScheme<generate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new TRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbname = iprot.readString();
                struct.setDbnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generate_argsTupleSchemeFactory implements SchemeFactory {
      public generate_argsTupleScheme getScheme() {
        return new generate_argsTupleScheme();
      }
    }

    private static class generate_argsTupleScheme extends TupleScheme<generate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRule()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetDbname()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rule = new TRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
      }
    }

  }

  public static class generate_result implements org.apache.thrift.TBase<generate_result, generate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generate_resultTupleSchemeFactory());
    }

    private String success; // required
    private TNadeefRemoteException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generate_result.class, metaDataMap);
    }

    public generate_result() {
    }

    public generate_result(
      String success,
      TNadeefRemoteException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generate_result(generate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRe()) {
        this.re = new TNadeefRemoteException(other.re);
      }
    }

    public generate_result deepCopy() {
      return new generate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public generate_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNadeefRemoteException getRe() {
      return this.re;
    }

    public generate_result setRe(TNadeefRemoteException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TNadeefRemoteException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generate_result)
        return this.equals((generate_result)that);
      return false;
    }

    public boolean equals(generate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generate_result typedOther = (generate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generate_resultStandardSchemeFactory implements SchemeFactory {
      public generate_resultStandardScheme getScheme() {
        return new generate_resultStandardScheme();
      }
    }

    private static class generate_resultStandardScheme extends StandardScheme<generate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TNadeefRemoteException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generate_resultTupleSchemeFactory implements SchemeFactory {
      public generate_resultTupleScheme getScheme() {
        return new generate_resultTupleScheme();
      }
    }

    private static class generate_resultTupleScheme extends TupleScheme<generate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TNadeefRemoteException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class verify_args implements org.apache.thrift.TBase<verify_args, verify_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verify_args");

    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verify_argsTupleSchemeFactory());
    }

    private TRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE((short)1, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verify_args.class, metaDataMap);
    }

    public verify_args() {
    }

    public verify_args(
      TRule rule)
    {
      this();
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verify_args(verify_args other) {
      if (other.isSetRule()) {
        this.rule = new TRule(other.rule);
      }
    }

    public verify_args deepCopy() {
      return new verify_args(this);
    }

    @Override
    public void clear() {
      this.rule = null;
    }

    public TRule getRule() {
      return this.rule;
    }

    public verify_args setRule(TRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((TRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verify_args)
        return this.equals((verify_args)that);
      return false;
    }

    public boolean equals(verify_args that) {
      if (that == null)
        return false;

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verify_args typedOther = (verify_args)other;

      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verify_args(");
      boolean first = true;

      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verify_argsStandardSchemeFactory implements SchemeFactory {
      public verify_argsStandardScheme getScheme() {
        return new verify_argsStandardScheme();
      }
    }

    private static class verify_argsStandardScheme extends StandardScheme<verify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new TRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verify_argsTupleSchemeFactory implements SchemeFactory {
      public verify_argsTupleScheme getScheme() {
        return new verify_argsTupleScheme();
      }
    }

    private static class verify_argsTupleScheme extends TupleScheme<verify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rule = new TRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
      }
    }

  }

  public static class verify_result implements org.apache.thrift.TBase<verify_result, verify_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verify_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private TNadeefRemoteException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verify_result.class, metaDataMap);
    }

    public verify_result() {
    }

    public verify_result(
      boolean success,
      TNadeefRemoteException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verify_result(verify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRe()) {
        this.re = new TNadeefRemoteException(other.re);
      }
    }

    public verify_result deepCopy() {
      return new verify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.re = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verify_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TNadeefRemoteException getRe() {
      return this.re;
    }

    public verify_result setRe(TNadeefRemoteException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TNadeefRemoteException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verify_result)
        return this.equals((verify_result)that);
      return false;
    }

    public boolean equals(verify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verify_result typedOther = (verify_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verify_resultStandardSchemeFactory implements SchemeFactory {
      public verify_resultStandardScheme getScheme() {
        return new verify_resultStandardScheme();
      }
    }

    private static class verify_resultStandardScheme extends StandardScheme<verify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TNadeefRemoteException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verify_resultTupleSchemeFactory implements SchemeFactory {
      public verify_resultTupleScheme getScheme() {
        return new verify_resultTupleScheme();
      }
    }

    private static class verify_resultTupleScheme extends TupleScheme<verify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TNadeefRemoteException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class detect_args implements org.apache.thrift.TBase<detect_args, detect_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("detect_args");

    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE1_FIELD_DESC = new org.apache.thrift.protocol.TField("table1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE2_FIELD_DESC = new org.apache.thrift.protocol.TField("table2", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUTDB_FIELD_DESC = new org.apache.thrift.protocol.TField("outputdb", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new detect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new detect_argsTupleSchemeFactory());
    }

    private TRule rule; // required
    private String table1; // required
    private String table2; // required
    private String outputdb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE((short)1, "rule"),
      TABLE1((short)2, "table1"),
      TABLE2((short)3, "table2"),
      OUTPUTDB((short)4, "outputdb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE
            return RULE;
          case 2: // TABLE1
            return TABLE1;
          case 3: // TABLE2
            return TABLE2;
          case 4: // OUTPUTDB
            return OUTPUTDB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRule.class)));
      tmpMap.put(_Fields.TABLE1, new org.apache.thrift.meta_data.FieldMetaData("table1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE2, new org.apache.thrift.meta_data.FieldMetaData("table2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUTDB, new org.apache.thrift.meta_data.FieldMetaData("outputdb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(detect_args.class, metaDataMap);
    }

    public detect_args() {
      this.outputdb = "nadeefdb";

    }

    public detect_args(
      TRule rule,
      String table1,
      String table2,
      String outputdb)
    {
      this();
      this.rule = rule;
      this.table1 = table1;
      this.table2 = table2;
      this.outputdb = outputdb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public detect_args(detect_args other) {
      if (other.isSetRule()) {
        this.rule = new TRule(other.rule);
      }
      if (other.isSetTable1()) {
        this.table1 = other.table1;
      }
      if (other.isSetTable2()) {
        this.table2 = other.table2;
      }
      if (other.isSetOutputdb()) {
        this.outputdb = other.outputdb;
      }
    }

    public detect_args deepCopy() {
      return new detect_args(this);
    }

    @Override
    public void clear() {
      this.rule = null;
      this.table1 = null;
      this.table2 = null;
      this.outputdb = "nadeefdb";

    }

    public TRule getRule() {
      return this.rule;
    }

    public detect_args setRule(TRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public String getTable1() {
      return this.table1;
    }

    public detect_args setTable1(String table1) {
      this.table1 = table1;
      return this;
    }

    public void unsetTable1() {
      this.table1 = null;
    }

    /** Returns true if field table1 is set (has been assigned a value) and false otherwise */
    public boolean isSetTable1() {
      return this.table1 != null;
    }

    public void setTable1IsSet(boolean value) {
      if (!value) {
        this.table1 = null;
      }
    }

    public String getTable2() {
      return this.table2;
    }

    public detect_args setTable2(String table2) {
      this.table2 = table2;
      return this;
    }

    public void unsetTable2() {
      this.table2 = null;
    }

    /** Returns true if field table2 is set (has been assigned a value) and false otherwise */
    public boolean isSetTable2() {
      return this.table2 != null;
    }

    public void setTable2IsSet(boolean value) {
      if (!value) {
        this.table2 = null;
      }
    }

    public String getOutputdb() {
      return this.outputdb;
    }

    public detect_args setOutputdb(String outputdb) {
      this.outputdb = outputdb;
      return this;
    }

    public void unsetOutputdb() {
      this.outputdb = null;
    }

    /** Returns true if field outputdb is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputdb() {
      return this.outputdb != null;
    }

    public void setOutputdbIsSet(boolean value) {
      if (!value) {
        this.outputdb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((TRule)value);
        }
        break;

      case TABLE1:
        if (value == null) {
          unsetTable1();
        } else {
          setTable1((String)value);
        }
        break;

      case TABLE2:
        if (value == null) {
          unsetTable2();
        } else {
          setTable2((String)value);
        }
        break;

      case OUTPUTDB:
        if (value == null) {
          unsetOutputdb();
        } else {
          setOutputdb((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE:
        return getRule();

      case TABLE1:
        return getTable1();

      case TABLE2:
        return getTable2();

      case OUTPUTDB:
        return getOutputdb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE:
        return isSetRule();
      case TABLE1:
        return isSetTable1();
      case TABLE2:
        return isSetTable2();
      case OUTPUTDB:
        return isSetOutputdb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detect_args)
        return this.equals((detect_args)that);
      return false;
    }

    public boolean equals(detect_args that) {
      if (that == null)
        return false;

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_table1 = true && this.isSetTable1();
      boolean that_present_table1 = true && that.isSetTable1();
      if (this_present_table1 || that_present_table1) {
        if (!(this_present_table1 && that_present_table1))
          return false;
        if (!this.table1.equals(that.table1))
          return false;
      }

      boolean this_present_table2 = true && this.isSetTable2();
      boolean that_present_table2 = true && that.isSetTable2();
      if (this_present_table2 || that_present_table2) {
        if (!(this_present_table2 && that_present_table2))
          return false;
        if (!this.table2.equals(that.table2))
          return false;
      }

      boolean this_present_outputdb = true && this.isSetOutputdb();
      boolean that_present_outputdb = true && that.isSetOutputdb();
      if (this_present_outputdb || that_present_outputdb) {
        if (!(this_present_outputdb && that_present_outputdb))
          return false;
        if (!this.outputdb.equals(that.outputdb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(detect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      detect_args typedOther = (detect_args)other;

      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable1()).compareTo(typedOther.isSetTable1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table1, typedOther.table1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable2()).compareTo(typedOther.isSetTable2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table2, typedOther.table2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputdb()).compareTo(typedOther.isSetOutputdb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputdb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputdb, typedOther.outputdb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detect_args(");
      boolean first = true;

      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table1:");
      if (this.table1 == null) {
        sb.append("null");
      } else {
        sb.append(this.table1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table2:");
      if (this.table2 == null) {
        sb.append("null");
      } else {
        sb.append(this.table2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputdb:");
      if (this.outputdb == null) {
        sb.append("null");
      } else {
        sb.append(this.outputdb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detect_argsStandardSchemeFactory implements SchemeFactory {
      public detect_argsStandardScheme getScheme() {
        return new detect_argsStandardScheme();
      }
    }

    private static class detect_argsStandardScheme extends StandardScheme<detect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, detect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new TRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table1 = iprot.readString();
                struct.setTable1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table2 = iprot.readString();
                struct.setTable2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUTDB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputdb = iprot.readString();
                struct.setOutputdbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, detect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.table1 != null) {
          oprot.writeFieldBegin(TABLE1_FIELD_DESC);
          oprot.writeString(struct.table1);
          oprot.writeFieldEnd();
        }
        if (struct.table2 != null) {
          oprot.writeFieldBegin(TABLE2_FIELD_DESC);
          oprot.writeString(struct.table2);
          oprot.writeFieldEnd();
        }
        if (struct.outputdb != null) {
          oprot.writeFieldBegin(OUTPUTDB_FIELD_DESC);
          oprot.writeString(struct.outputdb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detect_argsTupleSchemeFactory implements SchemeFactory {
      public detect_argsTupleScheme getScheme() {
        return new detect_argsTupleScheme();
      }
    }

    private static class detect_argsTupleScheme extends TupleScheme<detect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, detect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRule()) {
          optionals.set(0);
        }
        if (struct.isSetTable1()) {
          optionals.set(1);
        }
        if (struct.isSetTable2()) {
          optionals.set(2);
        }
        if (struct.isSetOutputdb()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
        if (struct.isSetTable1()) {
          oprot.writeString(struct.table1);
        }
        if (struct.isSetTable2()) {
          oprot.writeString(struct.table2);
        }
        if (struct.isSetOutputdb()) {
          oprot.writeString(struct.outputdb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, detect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rule = new TRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table1 = iprot.readString();
          struct.setTable1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.table2 = iprot.readString();
          struct.setTable2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputdb = iprot.readString();
          struct.setOutputdbIsSet(true);
        }
      }
    }

  }

  public static class detect_result implements org.apache.thrift.TBase<detect_result, detect_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("detect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new detect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new detect_resultTupleSchemeFactory());
    }

    private String success; // required
    private TNadeefRemoteException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(detect_result.class, metaDataMap);
    }

    public detect_result() {
    }

    public detect_result(
      String success,
      TNadeefRemoteException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public detect_result(detect_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRe()) {
        this.re = new TNadeefRemoteException(other.re);
      }
    }

    public detect_result deepCopy() {
      return new detect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public detect_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNadeefRemoteException getRe() {
      return this.re;
    }

    public detect_result setRe(TNadeefRemoteException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TNadeefRemoteException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detect_result)
        return this.equals((detect_result)that);
      return false;
    }

    public boolean equals(detect_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(detect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      detect_result typedOther = (detect_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detect_resultStandardSchemeFactory implements SchemeFactory {
      public detect_resultStandardScheme getScheme() {
        return new detect_resultStandardScheme();
      }
    }

    private static class detect_resultStandardScheme extends StandardScheme<detect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, detect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TNadeefRemoteException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, detect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detect_resultTupleSchemeFactory implements SchemeFactory {
      public detect_resultTupleScheme getScheme() {
        return new detect_resultTupleScheme();
      }
    }

    private static class detect_resultTupleScheme extends TupleScheme<detect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, detect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, detect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TNadeefRemoteException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class repair_args implements org.apache.thrift.TBase<repair_args, repair_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("repair_args");

    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE1_FIELD_DESC = new org.apache.thrift.protocol.TField("table1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE2_FIELD_DESC = new org.apache.thrift.protocol.TField("table2", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUTDB_FIELD_DESC = new org.apache.thrift.protocol.TField("outputdb", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new repair_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new repair_argsTupleSchemeFactory());
    }

    private TRule rule; // required
    private String table1; // required
    private String table2; // required
    private String outputdb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE((short)1, "rule"),
      TABLE1((short)2, "table1"),
      TABLE2((short)3, "table2"),
      OUTPUTDB((short)4, "outputdb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE
            return RULE;
          case 2: // TABLE1
            return TABLE1;
          case 3: // TABLE2
            return TABLE2;
          case 4: // OUTPUTDB
            return OUTPUTDB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRule.class)));
      tmpMap.put(_Fields.TABLE1, new org.apache.thrift.meta_data.FieldMetaData("table1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE2, new org.apache.thrift.meta_data.FieldMetaData("table2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUTDB, new org.apache.thrift.meta_data.FieldMetaData("outputdb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(repair_args.class, metaDataMap);
    }

    public repair_args() {
      this.outputdb = "nadeefdb";

    }

    public repair_args(
      TRule rule,
      String table1,
      String table2,
      String outputdb)
    {
      this();
      this.rule = rule;
      this.table1 = table1;
      this.table2 = table2;
      this.outputdb = outputdb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public repair_args(repair_args other) {
      if (other.isSetRule()) {
        this.rule = new TRule(other.rule);
      }
      if (other.isSetTable1()) {
        this.table1 = other.table1;
      }
      if (other.isSetTable2()) {
        this.table2 = other.table2;
      }
      if (other.isSetOutputdb()) {
        this.outputdb = other.outputdb;
      }
    }

    public repair_args deepCopy() {
      return new repair_args(this);
    }

    @Override
    public void clear() {
      this.rule = null;
      this.table1 = null;
      this.table2 = null;
      this.outputdb = "nadeefdb";

    }

    public TRule getRule() {
      return this.rule;
    }

    public repair_args setRule(TRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public String getTable1() {
      return this.table1;
    }

    public repair_args setTable1(String table1) {
      this.table1 = table1;
      return this;
    }

    public void unsetTable1() {
      this.table1 = null;
    }

    /** Returns true if field table1 is set (has been assigned a value) and false otherwise */
    public boolean isSetTable1() {
      return this.table1 != null;
    }

    public void setTable1IsSet(boolean value) {
      if (!value) {
        this.table1 = null;
      }
    }

    public String getTable2() {
      return this.table2;
    }

    public repair_args setTable2(String table2) {
      this.table2 = table2;
      return this;
    }

    public void unsetTable2() {
      this.table2 = null;
    }

    /** Returns true if field table2 is set (has been assigned a value) and false otherwise */
    public boolean isSetTable2() {
      return this.table2 != null;
    }

    public void setTable2IsSet(boolean value) {
      if (!value) {
        this.table2 = null;
      }
    }

    public String getOutputdb() {
      return this.outputdb;
    }

    public repair_args setOutputdb(String outputdb) {
      this.outputdb = outputdb;
      return this;
    }

    public void unsetOutputdb() {
      this.outputdb = null;
    }

    /** Returns true if field outputdb is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputdb() {
      return this.outputdb != null;
    }

    public void setOutputdbIsSet(boolean value) {
      if (!value) {
        this.outputdb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((TRule)value);
        }
        break;

      case TABLE1:
        if (value == null) {
          unsetTable1();
        } else {
          setTable1((String)value);
        }
        break;

      case TABLE2:
        if (value == null) {
          unsetTable2();
        } else {
          setTable2((String)value);
        }
        break;

      case OUTPUTDB:
        if (value == null) {
          unsetOutputdb();
        } else {
          setOutputdb((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE:
        return getRule();

      case TABLE1:
        return getTable1();

      case TABLE2:
        return getTable2();

      case OUTPUTDB:
        return getOutputdb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE:
        return isSetRule();
      case TABLE1:
        return isSetTable1();
      case TABLE2:
        return isSetTable2();
      case OUTPUTDB:
        return isSetOutputdb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof repair_args)
        return this.equals((repair_args)that);
      return false;
    }

    public boolean equals(repair_args that) {
      if (that == null)
        return false;

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_table1 = true && this.isSetTable1();
      boolean that_present_table1 = true && that.isSetTable1();
      if (this_present_table1 || that_present_table1) {
        if (!(this_present_table1 && that_present_table1))
          return false;
        if (!this.table1.equals(that.table1))
          return false;
      }

      boolean this_present_table2 = true && this.isSetTable2();
      boolean that_present_table2 = true && that.isSetTable2();
      if (this_present_table2 || that_present_table2) {
        if (!(this_present_table2 && that_present_table2))
          return false;
        if (!this.table2.equals(that.table2))
          return false;
      }

      boolean this_present_outputdb = true && this.isSetOutputdb();
      boolean that_present_outputdb = true && that.isSetOutputdb();
      if (this_present_outputdb || that_present_outputdb) {
        if (!(this_present_outputdb && that_present_outputdb))
          return false;
        if (!this.outputdb.equals(that.outputdb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(repair_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      repair_args typedOther = (repair_args)other;

      lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable1()).compareTo(typedOther.isSetTable1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table1, typedOther.table1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable2()).compareTo(typedOther.isSetTable2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table2, typedOther.table2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputdb()).compareTo(typedOther.isSetOutputdb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputdb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputdb, typedOther.outputdb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("repair_args(");
      boolean first = true;

      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table1:");
      if (this.table1 == null) {
        sb.append("null");
      } else {
        sb.append(this.table1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table2:");
      if (this.table2 == null) {
        sb.append("null");
      } else {
        sb.append(this.table2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputdb:");
      if (this.outputdb == null) {
        sb.append("null");
      } else {
        sb.append(this.outputdb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class repair_argsStandardSchemeFactory implements SchemeFactory {
      public repair_argsStandardScheme getScheme() {
        return new repair_argsStandardScheme();
      }
    }

    private static class repair_argsStandardScheme extends StandardScheme<repair_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, repair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new TRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table1 = iprot.readString();
                struct.setTable1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table2 = iprot.readString();
                struct.setTable2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUTDB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputdb = iprot.readString();
                struct.setOutputdbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, repair_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.table1 != null) {
          oprot.writeFieldBegin(TABLE1_FIELD_DESC);
          oprot.writeString(struct.table1);
          oprot.writeFieldEnd();
        }
        if (struct.table2 != null) {
          oprot.writeFieldBegin(TABLE2_FIELD_DESC);
          oprot.writeString(struct.table2);
          oprot.writeFieldEnd();
        }
        if (struct.outputdb != null) {
          oprot.writeFieldBegin(OUTPUTDB_FIELD_DESC);
          oprot.writeString(struct.outputdb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class repair_argsTupleSchemeFactory implements SchemeFactory {
      public repair_argsTupleScheme getScheme() {
        return new repair_argsTupleScheme();
      }
    }

    private static class repair_argsTupleScheme extends TupleScheme<repair_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, repair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRule()) {
          optionals.set(0);
        }
        if (struct.isSetTable1()) {
          optionals.set(1);
        }
        if (struct.isSetTable2()) {
          optionals.set(2);
        }
        if (struct.isSetOutputdb()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRule()) {
          struct.rule.write(oprot);
        }
        if (struct.isSetTable1()) {
          oprot.writeString(struct.table1);
        }
        if (struct.isSetTable2()) {
          oprot.writeString(struct.table2);
        }
        if (struct.isSetOutputdb()) {
          oprot.writeString(struct.outputdb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, repair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rule = new TRule();
          struct.rule.read(iprot);
          struct.setRuleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table1 = iprot.readString();
          struct.setTable1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.table2 = iprot.readString();
          struct.setTable2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputdb = iprot.readString();
          struct.setOutputdbIsSet(true);
        }
      }
    }

  }

  public static class repair_result implements org.apache.thrift.TBase<repair_result, repair_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("repair_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new repair_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new repair_resultTupleSchemeFactory());
    }

    private String success; // required
    private TNadeefRemoteException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(repair_result.class, metaDataMap);
    }

    public repair_result() {
    }

    public repair_result(
      String success,
      TNadeefRemoteException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public repair_result(repair_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRe()) {
        this.re = new TNadeefRemoteException(other.re);
      }
    }

    public repair_result deepCopy() {
      return new repair_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public repair_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNadeefRemoteException getRe() {
      return this.re;
    }

    public repair_result setRe(TNadeefRemoteException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((TNadeefRemoteException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof repair_result)
        return this.equals((repair_result)that);
      return false;
    }

    public boolean equals(repair_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(repair_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      repair_result typedOther = (repair_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("repair_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class repair_resultStandardSchemeFactory implements SchemeFactory {
      public repair_resultStandardScheme getScheme() {
        return new repair_resultStandardScheme();
      }
    }

    private static class repair_resultStandardScheme extends StandardScheme<repair_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, repair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new TNadeefRemoteException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, repair_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class repair_resultTupleSchemeFactory implements SchemeFactory {
      public repair_resultTupleScheme getScheme() {
        return new repair_resultTupleScheme();
      }
    }

    private static class repair_resultTupleScheme extends TupleScheme<repair_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, repair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, repair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new TNadeefRemoteException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_args implements org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
    }

    private String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_args.class, metaDataMap);
    }

    public getJobStatus_args() {
    }

    public getJobStatus_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_args(getJobStatus_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getJobStatus_args deepCopy() {
      return new getJobStatus_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public getJobStatus_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_args)
        return this.equals((getJobStatus_args)that);
      return false;
    }

    public boolean equals(getJobStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_args typedOther = (getJobStatus_args)other;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_argsStandardScheme getScheme() {
        return new getJobStatus_argsStandardScheme();
      }
    }

    private static class getJobStatus_argsStandardScheme extends StandardScheme<getJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_argsTupleScheme getScheme() {
        return new getJobStatus_argsTupleScheme();
      }
    }

    private static class getJobStatus_argsTupleScheme extends TupleScheme<getJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_result implements org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_resultTupleSchemeFactory());
    }

    private TJobStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJobStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_result.class, metaDataMap);
    }

    public getJobStatus_result() {
    }

    public getJobStatus_result(
      TJobStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_result(getJobStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TJobStatus(other.success);
      }
    }

    public getJobStatus_result deepCopy() {
      return new getJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TJobStatus getSuccess() {
      return this.success;
    }

    public getJobStatus_result setSuccess(TJobStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TJobStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_result)
        return this.equals((getJobStatus_result)that);
      return false;
    }

    public boolean equals(getJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_result typedOther = (getJobStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_resultStandardScheme getScheme() {
        return new getJobStatus_resultStandardScheme();
      }
    }

    private static class getJobStatus_resultStandardScheme extends StandardScheme<getJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TJobStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_resultTupleScheme getScheme() {
        return new getJobStatus_resultTupleScheme();
      }
    }

    private static class getJobStatus_resultTupleScheme extends TupleScheme<getJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TJobStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllJobStatus_args implements org.apache.thrift.TBase<getAllJobStatus_args, getAllJobStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllJobStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobStatus_args.class, metaDataMap);
    }

    public getAllJobStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobStatus_args(getAllJobStatus_args other) {
    }

    public getAllJobStatus_args deepCopy() {
      return new getAllJobStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobStatus_args)
        return this.equals((getAllJobStatus_args)that);
      return false;
    }

    public boolean equals(getAllJobStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllJobStatus_args typedOther = (getAllJobStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllJobStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getAllJobStatus_argsStandardScheme getScheme() {
        return new getAllJobStatus_argsStandardScheme();
      }
    }

    private static class getAllJobStatus_argsStandardScheme extends StandardScheme<getAllJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getAllJobStatus_argsTupleScheme getScheme() {
        return new getAllJobStatus_argsTupleScheme();
      }
    }

    private static class getAllJobStatus_argsTupleScheme extends TupleScheme<getAllJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllJobStatus_result implements org.apache.thrift.TBase<getAllJobStatus_result, getAllJobStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllJobStatus_resultTupleSchemeFactory());
    }

    private List<TJobStatus> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJobStatus.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobStatus_result.class, metaDataMap);
    }

    public getAllJobStatus_result() {
    }

    public getAllJobStatus_result(
      List<TJobStatus> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobStatus_result(getAllJobStatus_result other) {
      if (other.isSetSuccess()) {
        List<TJobStatus> __this__success = new ArrayList<TJobStatus>();
        for (TJobStatus other_element : other.success) {
          __this__success.add(new TJobStatus(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllJobStatus_result deepCopy() {
      return new getAllJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TJobStatus> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TJobStatus elem) {
      if (this.success == null) {
        this.success = new ArrayList<TJobStatus>();
      }
      this.success.add(elem);
    }

    public List<TJobStatus> getSuccess() {
      return this.success;
    }

    public getAllJobStatus_result setSuccess(List<TJobStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TJobStatus>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobStatus_result)
        return this.equals((getAllJobStatus_result)that);
      return false;
    }

    public boolean equals(getAllJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllJobStatus_result typedOther = (getAllJobStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getAllJobStatus_resultStandardScheme getScheme() {
        return new getAllJobStatus_resultStandardScheme();
      }
    }

    private static class getAllJobStatus_resultStandardScheme extends StandardScheme<getAllJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<TJobStatus>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    TJobStatus _elem18; // required
                    _elem18 = new TJobStatus();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TJobStatus _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getAllJobStatus_resultTupleScheme getScheme() {
        return new getAllJobStatus_resultTupleScheme();
      }
    }

    private static class getAllJobStatus_resultTupleScheme extends TupleScheme<getAllJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TJobStatus _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TJobStatus>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              TJobStatus _elem23; // required
              _elem23 = new TJobStatus();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
