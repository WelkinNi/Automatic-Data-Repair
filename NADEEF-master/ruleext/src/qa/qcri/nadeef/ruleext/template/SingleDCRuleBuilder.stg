addPredicate(template) ::= <<
predicates.add(Predicate.valueOf("$template$", tableName)); $\n$
>>

dcTemplate(DCName, template, tableName) ::= <<
/** Code Generated by NADEEF.*/
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.HashMap;

import qa.qcri.nadeef.core.datamodel.Operation;
import qa.qcri.nadeef.core.datamodel.Column;
import qa.qcri.nadeef.core.datamodel.Cell;
import qa.qcri.nadeef.core.datamodel.Fix;
import qa.qcri.nadeef.core.datamodel.Predicate;
import qa.qcri.nadeef.core.datamodel.SingleTupleRule;
import qa.qcri.nadeef.core.datamodel.Tuple;
import qa.qcri.nadeef.core.datamodel.Violation;

public class $DCName$ extends SingleTupleRule {
    private List<Predicate> predicates;

    public $DCName$() {
        String tableName = "$tableName$";
        predicates = new ArrayList<>();

        $template:addPredicate()$
    }

    @Override
    public Collection<Violation> detect(Tuple tuple) {
        boolean isValid = true;
        List<Violation> result = new ArrayList<Violation>();
        Set<Cell> infectedCells = new HashSet<Cell>();
        for (Predicate predicate : predicates) {
            if (!predicate.isValid(tuple)) {
                isValid = false;
                break;
            }

            Cell leftCell = tuple.getCell(predicate.getLeft());
            infectedCells.add(leftCell);
            if (!predicate.isRightConstant()){
                Cell rightCell = tuple.getCell(predicate.getRight());
                infectedCells.add(rightCell);
            }
        }

        // all the predicates are valid, then the DC is violated
        if (isValid) {
            Violation violation = new Violation(getRuleName());
            for (Cell cell : infectedCells){
                violation.addCell(cell);
            }

            //violation.addCell(cell);
            result.add(violation);
        }

        return result;
    }

    @Override
    public Collection<Fix> repair(Violation violation) {
        List<Cell> cells = new ArrayList<>(violation.getCells());
        List<Fix> result = new ArrayList<>();
        HashMap<Column, Cell> columnMap = new HashMap<>();

        Fix.Builder builder = new Fix.Builder(violation);
        for (Cell cell : cells)
            columnMap.put(cell.getColumn(), cell);

        for (Predicate predicate : predicates) {
            Column leftColumn = predicate.getLeft();
            if (predicate.isRightConstant()) {
                result.add(builder
                    .left(columnMap.get(leftColumn))
                    .op(repairOperation(predicate.getOperation()))
                    .right(predicate.getValue())
                    .build()
                );
            } else {
                Column rightColumn = predicate.getRight();
                result.add(builder
                    .left(columnMap.get(leftColumn))
                    .op(repairOperation(predicate.getOperation()))
                    .right(columnMap.get(rightColumn))
                    .build()
                );
            }
        }
        return result;
    }

    private Operation repairOperation(Operation op) {
        Operation result = null;
        switch (op) {
            case EQ:
                result = Operation.NEQ;
                break;
            case GT:
                result = Operation.LTE;
                break;
            case GTE:
                result = Operation.LT;
                break;
            case LT:
                result = Operation.GTE;
                break;
            case LTE:
                result = Operation.GT;
                break;
            case NEQ:
                result = Operation.EQ;
                break;
            default:
                assert true : "unknown operations";
        }
        return result;
    }
}
>>