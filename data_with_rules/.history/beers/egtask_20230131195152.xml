<?xml version="1.0" encoding="UTF-8"?>
<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <source>
        <!-- The (optional) source database stores tables that 
        cannot be modified (for example master data) 
        BART will not introduce changes in these tables -->
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql:bart_beers</uri>
            <schema>source</schema>
            <login>niwei</login>
            <password>123456</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="md">clean.csv</input>
        </import>
    </source>

    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql:bart_beers</uri>
            <schema>target</schema>
            <login>niwei</login>
            <password>123456</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="person">clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies>
<![CDATA[
DCs:
// FD: Zip -> City
// e1: person(ssn: $ssn1, name: $n1, surname: $s1, city: $c1, zip: $z1), 
// person(ssn: $ssn2, name: $n2, surname: $s2, city: $c2, zip: $z2), 
//     $z1 == $z2, $c1 != $c2 -> #fail.
]]>
    </dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>/Temp/bart/example/</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>/Temp/bart/example/changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.1</defaultPercentage>
            <!-- <vioGenQueries>
                <vioGenQuery id="e1">
                    <comparison>(z1 == z2)</comparison>
                    <percentage>1.0</percentage> 
                </vioGenQuery>
                <vioGenQuery id="e1">
                    <comparison>(c1 != c2)</comparison>
                    <percentage>1.0</percentage> 
                </vioGenQuery>
            </vioGenQueries> -->
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
            </defaultStrategy> 
            <attributeStrategy>
                <attribute table="person" name="style">
                    <strategy>TypoActiveDomain</strategy>
                </attribute>
            </attributeStrategy>
            <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
            <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
            <strategy charsToRemove="3">TypoRemoveString</strategy>
            <strategy charsToSwitch="3">TypoSwitchValue</strategy>
            <strategy>TypoActiveDomain</strategy>
            <strategy>TypoRandom</strategy>
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>